// ‚úÖ C·∫¢I THI·ªÜN api.ts
import axios, { AxiosError } from "axios";
import { getSession, signOut } from "next-auth/react";
import type { IProduct } from "@/types/product";
import type { CartResponse as ICartResponse } from "@/types/cart";



const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000";

// üß© T·∫°o axios instance c√≥ s·∫µn token + interceptor
export const createApiClient = async () => {
  const session = await getSession();
  const token =
    (session as any)?.accessToken || (session as any)?.user?.accessToken;

  const instance = axios.create({
    baseURL: `${API_BASE_URL}/api`,
    headers: token ? { Authorization: `Bearer ${token}` } : {},
  });

  // ‚úÖ Interceptor x·ª≠ l√Ω l·ªói to√†n c·ª•c
  instance.interceptors.response.use(
    (response) => {
      // Validate response data
      if (response.data === undefined || response.data === null) {
        console.warn("‚ö†Ô∏è Empty response data received");
        return response;
      }
      return response;
    },
    (error: AxiosError<{ message: string }>) => {
      let message = "An error occurred";
      
      try {
        if (error.response?.data) {
          if (typeof error.response.data === 'string') {
            message = error.response.data;
          } else if (error.response.data.message) {
            message = error.response.data.message;
          }
        }
      } catch (parseError) {
        console.error("‚ùå Error parsing response:", parseError);
        message = `Server error: ${error.response?.status || 'Unknown'}`;
      }

      // ‚ö†Ô∏è N·∫øu token h·∫øt h·∫°n, c√≥ th·ªÉ t·ª± logout
      if (error.response?.status === 401) {
        console.error("‚ùå Authentication failed:", message);
        // signOut({ callbackUrl: "/auth/login" }); // ‚Üê b·∫≠t n·∫øu mu·ªën t·ª± logout
      }

      throw new Error(message);
    }
  );

  return instance;
};

// ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m
// ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m (lu√¥n l·∫•y to√†n b·ªô, kh√¥ng gi·ªõi h·∫°n)
export const getProducts = async (forceRefresh: boolean = false): Promise<IProduct[]> => {
  const api = await createApiClient();
  try {
    // ‚öôÔ∏è Th√™m ?limit=0 ƒë·ªÉ backend tr·∫£ v·ªÅ to√†n b·ªô s·∫£n ph·∫©m
    let url = '/products?limit=0';
    
    if (forceRefresh) {
      // Force refresh - add timestamp and random to bypass cache
      const timestamp = Date.now();
      const random = Math.random().toString(36).substring(7);
      url = `/products?limit=0&ts=${timestamp}&r=${random}`;
    }

    const res = await api.get(url, {
      headers: forceRefresh ? {
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0",
        "If-Modified-Since": "0"
      } : {
        "Cache-Control": "max-age=30" // Cache for 30 seconds
      },
    });

    console.log("üì¶ API Response:", res.data);

    // Backend returns { success: true, products: [...] }
    if (res.data?.success && Array.isArray(res.data.products)) {
      return res.data.products;
    }

    // Fallback for different response formats
    if (Array.isArray(res.data)) return res.data;
    if (Array.isArray(res.data.data)) return res.data.data;

    console.warn("‚ö†Ô∏è Unexpected products response format:", res.data);
    return [];
  } catch (error: any) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error.message);
    return [];
  }
};


// ‚úÖ L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
export const getProductById = async (id: string): Promise<IProduct | null> => {
  const api = await createApiClient();
  try {
    const res = await api.get(`/products/${id}`);

    if (res.data?._id) return res.data;
    if (res.data?.data?._id) return res.data.data;
    if (res.data?.product?._id) return res.data.product;

    console.warn("‚ö†Ô∏è API /products/:id kh√¥ng tr·∫£ v·ªÅ s·∫£n ph·∫©m h·ª£p l·ªá:", res.data);
    return null;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error.message);
    return null;
  }
};

// ‚úÖ X√≥a s·∫£n ph·∫©m theo ID
export const deleteProduct = async (id: string): Promise<boolean> => {
  const api = await createApiClient();
  try {
    const res = await api.delete(`/products/${id}`);

    if (res.status === 200 || res.status === 204) {
      console.log("‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m:", id);
      return true;
    }

    console.warn("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ m√£ th√†nh c√¥ng:", res.status);
    return false;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", error.message);
    return false;
  }
};

// ‚úÖ T·∫°o s·∫£n ph·∫©m m·ªõi
export const createProduct = async (product: any) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/products", product);
    
    console.log("üì¶ Create Product Response:", res.data);
    
    // Return the product data in a consistent format
    if (res.data?.product) {
      return { product: res.data.product, success: true };
    } else if (res.data?._id) {
      return { product: res.data, success: true };
    } else {
      throw new Error("Invalid response format from server");
    }
  } catch (error: any) {
    console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error.message);
    throw error;
  }
};

// ‚úÖ Logout ng∆∞·ªùi d√πng v·ªõi NextAuth
export const logoutUser = async () => {
  await signOut({ callbackUrl: "/auth/login" });
};

// ‚úÖ Request password reset
export const requestPasswordReset = async (email: string) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/auth/forgot-password", { email });
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi y√™u c·∫ßu reset password:", error.message);
    throw error;
  }
};

// ‚úÖ Resend verification email
export const resendVerificationEmail = async (email: string) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/auth/resend-verification", { email });
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi g·ª≠i l·∫°i email x√°c th·ª±c:", error.message);
    throw error;
  }
};

// ‚úÖ Reset password
export const resetPassword = async (token: string, newPassword: string) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/auth/reset-password", { token, newPassword });
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi reset password:", error.message);
    throw error;
  }
};

// ‚úÖ Register user
export const registerUser = async (userData: any) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/auth/register", userData);
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω:", error.message);
    throw error;
  }
};

// ‚úÖ Update product
export const updateProduct = async (id: string, productData: any) => {
  const api = await createApiClient();
  try {
    const res = await api.put(`/products/${id}`, productData);
    
    console.log("üì¶ Update Product Response:", res.data);
    
    // Return the product data in a consistent format
    if (res.data?.product) {
      return { product: res.data.product, success: true };
    } else if (res.data?._id) {
      return { product: res.data, success: true };
    } else {
      throw new Error("Invalid response format from server");
    }
  } catch (error: any) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error.message);
    throw error;
  }
};

// ‚úÖ Force refresh products (clear any potential cache)
export const forceRefreshProducts = async (): Promise<IProduct[]> => {
  console.log("üîÑ Force refreshing products...");
  return await getProducts();
};

// ======================= CART API =======================

interface CartResponse {
  items?: any[];
  cart?: { items?: any[]; total?: number };
  data?: { items?: any[] };
  total?: number;
}

// ‚úÖ Chu·∫©n h√≥a d·ªØ li·ªáu cart tr·∫£ v·ªÅ
const extractCartItems = (res: any): any[] => {
  if (!res || !res.data) return [];
  const data = res.data as CartResponse;
  if (Array.isArray(data.items)) return data.items;
  if (Array.isArray(data.cart?.items)) return data.cart.items;
  if (Array.isArray(data.data?.items)) return data.data.items;
  return [];
};

// ‚úÖ L·∫•y gi·ªè h√†ng hi·ªán t·∫°i
// ‚úÖ L·∫•y gi·ªè h√†ng hi·ªán t·∫°i
export const getCart = async (): Promise<CartResponse> => {
  const api = await createApiClient();
  try {
    const res = await api.get("/cart"); // <-- t·ª± ƒë·ªông th√™m baseURL: http://localhost:5000/api
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói load gi·ªè h√†ng:", error.message);
    throw error;
  }
};


// ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè
export const addToCart = async (productId: string, quantity: number = 1) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/cart", { productId, quantity });
    const items = extractCartItems(res);
    return items;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè:", error.message);
    throw error;
  }
};

// ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
export const updateCartItem = async (productId: string, quantity: number) => {
  const api = await createApiClient();
  try {
    const res = await api.put(`/cart/${productId}`, { quantity });
    const items = extractCartItems(res);
    return items;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error.message);
    throw error;
  }
};

// ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
export const removeCartItem = async (productId: string) => {
  const api = await createApiClient();
  try {
    const res = await api.delete(`/cart/${productId}`);
    return (res.data);
  } catch (error: any) {
    console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè:", error.message);
    throw error;
  }
};

// ‚úÖ X√≥a to√†n b·ªô gi·ªè h√†ng
export const clearCart = async () => {
  const api = await createApiClient();
  try {
    const res = await api.delete("/cart");
    const items = extractCartItems(res);
    return items;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi x√≥a to√†n b·ªô gi·ªè h√†ng:", error.message);
    throw error;
  }
};


// =======================  ORDER API =======================

export const createOrder = async (orderData: any) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/orders", orderData);
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", error.message);
    throw error;
  }
};

export const getMyOrders = async () => {
  const api = await createApiClient();
  try {
    const res = await api.get("/orders/me");
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error.message);
    throw error;
  }
};

export const getOrderById = async (orderId: string) => {
  const api = await createApiClient();
  try {
    const res = await api.get(`/orders/${orderId}`);
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error.message);
    throw error;
  }
};

// =======================  PAYMENT API =======================

export const simulatePayment = async (
  orderId: string,
  method: string = "credit_card"
) => {
  const api = await createApiClient();
  try {
    const res = await api.post("/payments/simulate", { orderId, method });
    return res.data;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi gi·∫£ l·∫≠p thanh to√°n:", error.message);
    throw error;
  }
};
